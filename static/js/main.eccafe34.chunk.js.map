{"version":3,"sources":["actions/campusActions.js","actions/connectionActions.js","actions/scenarioActions.js","reducers/campusReducer.js","components/tooltips.js","components/GenericForm.js","components/form.js","screens/region_form.js","components/card.js","components/graph.js","actions/graphActions.js","components/table.js","components/slider.js","components/graphForm.js","screens/graph_screen.js","reducers/scenarioReducer.js","connector/mapper.js","connector/socketConnector.js","components/form2.js","screens/scenario_form.js","screens/info_screen.js","components/left_pane.js","App.js","serviceWorker.js","reducers/connectionReducer.js","reducers/graphReducer.js","reducers/rootReducer.js","index.js"],"names":["module","exports","savecampus","payload","type","data","resetcampus","idReceive","simComplete","saveScenarios","resetScenarios","defaultCampus","totalSimulatedDays","populationDistribution","maxAge","probability","deathRate","incubationPeriod","probabilityOfSeverity","mild","mediocre","severe","probabilityOfComorbidity","virusParameters","r0","InitialTestingCapacampus","expectedDaysToCure","fullCapacampusRatio","hospital","covidHealthCare","covidIsolationCentre","transportExposureParameter","Time","Distance","homeExposureParameter","groceryExposureParameter","randomExposureParameter","unemployedExposureParameter","campusReducer","state","action","campus","dayRange","console","log","warn","tooltips","useStyles","makeStyles","theme","root","width","margin","padding","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","keyToFieldName","key","replace","str","toUpperCase","GenericForm","schema","setData","name","display","format","arrayAction","undefined","keys","Object","classes","className","accordionRoot","Accordion","AccordionSummary","expandIcon","aria-controls","id","Typography","accordionHeading","Tooltip","title","style","lineHeight","placement","cursor","arrow","color","marginLeft","AccordionDetails","flexDirection","map","k","Array","isArray","Button","variant","icon","onClick","push","cloneDeep","elt","idx","Card","cardRoot","CardHeader","avatar","splice","String","CardContent","call","content","TextField","label","defaultValue","InputLabelProps","shrink","onChange","e","Number","target","value","FormControlLabel","control","Checkbox","checked","withRouter","connect","props","history","dispatch","height","btnRoot","RegionForm","React","Component","CardTab","this","position","stats","right","top","change","duration","formControl","spacing","minWidth","selectEmpty","marginTop","maxDay","simulationData","graphDisplay","cols","i","daily","forEach","col","scenario","column","aggregate","left","bottom","strokeDasharray","dataKey","domain","datakey","stroke","dot","r","table","backgroundColor","opacampus","tableCell","createData","calories","fat","carbs","protein","rows","CustomTable","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","textAlign","float","valuetext","gutterBottom","Slider","event","newValue","valueLabelDisplay","aria-labelledby","getAriaValueText","max","defaultData","useState","setValue","updateData","borderRadius","filter","element","FormControl","InputLabel","Select","labelId","MenuItem","all_ok","val","alert","GraphScreen","defaultScenarioCollection","scenarioDetails","ComplianceRate","scenarioReducer","scenarios","mapFrontendToBackend","ans","ComorbidX","population","fcr","initialTestingCapacampus","probabilityOfContactTracing","Transport","Home","Grocery","Unemployed","Random","io","simulations","CircularProgress","complete","dat","emit","caller","JSON","stringify","transaction","ScenarioForm","InfoScreen","LeftPane","exact","path","to","borderBottom","App","Boolean","window","location","hostname","match","connectionReducer","newState","fetch","then","text","csv","parse","columns","err","response","graphReducer","initState","store","createStore","startsWith","composeWithDevTools","socket","on","indexOf","ReactDOM","render","StrictMode","connector","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eccafe34.chunk.js","sourcesContent":["function savecampus(payload) {\n  return {\n    type: \"CAMPUS_SAVE_DATA\",\n    data: payload,\n  };\n}\n\nfunction resetcampus() {\n  return {\n    type: \"CAMPUS_RESET_DATA\",\n  };\n}\n\nmodule.exports = {\n  savecampus,\n  resetcampus,\n};\n","const idReceive = (data) => {\n    return {\n        \"type\": \"IO_STORE_ID\",\n        data\n    }\n}\n\nconst simComplete = (data) => {\n    return {\n        \"type\": \"IO_SIM_COMPLETE\",\n        data\n    }\n}\nmodule.exports = {\n    idReceive,\n    simComplete\n}","function saveScenarios(payload){\n    return {\n        \"type\": \"SCENARIO_SAVE_DATA\",\n        \"data\": payload\n    }\n}\n\nfunction resetScenarios(){\n    return {\n        type: \"SCENARIO_RESET_DATA\"\n    }\n}\n\nmodule.exports = {\n    saveScenarios,\n    resetScenarios\n}","export const defaultPopulationDistribution = {\n  maxAge: 18,\n  probability: 0.5,\n  deathRate: 0.01,\n  incubationPeriod: 6,\n  probabilityOfSeverity: {\n    mild: 0.7,\n    mediocre: 0.26,\n    severe: 0.04,\n  },\n  probabilityOfWork: {\n    education: 0.5,\n    office: 0,\n    commerce: 0,\n    healthcare: 0,\n    noWork: 0.5,\n  },\n  probabilityOfComorbidity: 0.1,\n};\n\nexport const defaultCampus = {\n  totalSimulatedDays: 5,\n\n  populationDistribution: [\n    {\n      maxAge: 5,\n      probability: 0.131,\n      deathRate: 0.01,\n      incubationPeriod: 6,\n      probabilityOfSeverity: {\n        mild: 0.7,\n        mediocre: 0.26,\n        severe: 0.04,\n      },\n      probabilityOfComorbidity: 0.0,\n    },\n    {\n      maxAge: 18,\n      probability: 0.242,\n      deathRate: 0.005,\n      incubationPeriod: 6,\n      probabilityOfSeverity: {\n        mild: 0.8,\n        mediocre: 0.16,\n        severe: 0.04,\n      },\n      probabilityOfComorbidity: 0.0,\n    },\n    {\n      maxAge: 25,\n      probability: 0.126,\n      deathRate: 0.01,\n      incubationPeriod: 8,\n      probabilityOfSeverity: {\n        mild: 0.95,\n        mediocre: 0.04,\n        severe: 0.01,\n      },\n      probabilityOfComorbidity: 0.0,\n    },\n    {\n      maxAge: 60,\n      probability: 0.346,\n      deathRate: 0.01,\n      incubationPeriod: 5,\n      probabilityOfSeverity: {\n        mild: 0.6,\n        mediocre: 0.3,\n        severe: 0.1,\n      },\n      probabilityOfComorbidity: 0.0,\n    },\n    {\n      maxAge: 80,\n      probability: 0.075,\n      deathRate: 0.04,\n      incubationPeriod: 2,\n      probabilityOfSeverity: {\n        mild: 0.4,\n        mediocre: 0.4,\n        severe: 0.2,\n      },\n      probabilityOfComorbidity: 0.0,\n    },\n    {\n      maxAge: 150,\n      probability: 0.08,\n      deathRate: 0.3,\n      incubationPeriod: 2,\n      probabilityOfSeverity: {\n        mild: 0.1,\n        mediocre: 0.4,\n        severe: 0.5,\n      },\n      probabilityOfComorbidity: 0.0,\n    },\n  ],\n  virusParameters: {\n    r0: 2.0,\n    // probabilityOfContactTracing: 0.9,\n    InitialTestingCapacampus: 1000,\n    expectedDaysToCure: 14,\n    fullCapacampusRatio: {\n      hospital: 1.66,\n      covidHealthCare: 1.66,\n      covidIsolationCentre: 1.66,\n    },\n    transportExposureParameter: {\n      Time: 2.2283,\n      Distance: 1,\n    },\n    homeExposureParameter: {\n      Time: 16,\n      Distance: 1,\n    },\n    groceryExposureParameter: {\n      Time: 0.5,\n      Distance: 4,\n    },\n\n    randomExposureParameter: {\n      Time: 1,\n      Distance: 2,\n    },\n    unemployedExposureParameter: {\n      Time: 8,\n      Distance: 1,\n    },\n  },\n};\n\nexport const campusReducer = (state, action) => {\n  if (action.type === \"CAMPUS_SAVE_DATA\") {\n    return {\n      ...state,\n      campus: action.data,\n      dayRange: [0, action.data.totalSimulatedDays],\n    };\n  } else if (action.type === \"CAMPUS_RESET_DATA\") {\n    return {\n      ...state,\n      campus: defaultCampus,\n      dayRange: [0, defaultCampus.totalSimulatedDays],\n    };\n  } else {\n    console.log(action);\n    console.warn(\"Action not recognized.\");\n    return state;\n  }\n};\n","const tooltips = {\n  virusParameters:\n    \"First add the R0 value for the virus you wish to simulate. Add initial testing capacampus and expected days to cure. The below listed exposure parameters contain expected time an Agent spends there, and the social distance he is able to maintain\",\n  fullCapacampusRatio:\n    \"The number of patients which each covid healtcare worker can handle successfully. In other words, bed capacampus per healtcare worker in different subclass of healthcare sectors\",\n};\n\nexport default tooltips;\n","import React from \"react\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { cloneDeep } from \"lodash\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport tooltips from \"./tooltips\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"95%\",\n    margin: \"auto\",\n    padding: \"1rem\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\nfunction keyToFieldName(key) {\n  return key.replace(/([A-Z])/g, \" $1\").replace(/^./, function (str) {\n    return str.toUpperCase();\n  });\n}\n\nfunction GenericForm({\n  schema,\n  data,\n  setData,\n  name,\n  display,\n  format = keyToFieldName,\n  arrayAction = undefined,\n}) {\n  // Schema and data have same structure.\n  // But schema must be immutable.\n  // data is the mutable prop (connected to state)\n  // Any array inside schema must be homogenous\n  // and must contain at least one object\n  // defining the structure of each element.\n  // arrayAction is an object of the form:\n  // {\n  //     content: \"JSX containing elements inside button\",\n  //     call: \"A function that element and index of the array element as parameter\"\n  // }\n  // If the param is not undefined,\n  // Corresponding button is appended at one level deep to each array element\n\n  let keys = Object.keys(schema);\n  let classes = useStyles();\n  return (\n    <div className={classes.accordionRoot}>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls={name + \"-content\"}\n          id={name + \"-header\"}\n        >\n          <Typography className={classes.accordionHeading}>\n            {format(name)}\n            {tooltips[name] ? (\n              <Tooltip\n                title={\n                  <div\n                    style={{\n                      fontSize: \"1rem\",\n                      padding: \"0.5rem\",\n                      lineHeight: \"1.3rem\",\n                    }}\n                  >\n                    {tooltips[name]}\n                  </div>\n                }\n                placement=\"right\"\n                style={{\n                  display: \"inline-block\",\n                  cursor: \"pointer\",\n                }}\n                arrow\n              >\n                <HelpOutlineIcon\n                  style={{\n                    fontSize: \"1rem\",\n                    color: \"gray\",\n                    marginLeft: \"1rem\",\n                  }}\n                />\n              </Tooltip>\n            ) : (\n              <div></div>\n            )}\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <div style={{ flexDirection: \"column\" }}>\n            {keys.map((k) => {\n              if (display(k)) {\n                if (Array.isArray(schema[k])) {\n                  // Support only array of objects\n                  return (\n                    <Accordion>\n                      <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls={name + \"-\" + k + \"-content\"}\n                        id={name + \"-\" + k + \"-header\"}\n                      >\n                        <Typography className={classes.accordionHeading}>\n                          {format(k)}\n                          {tooltips[k] ? (\n                            <Tooltip\n                              title={\n                                <div\n                                  style={{\n                                    fontSize: \"1rem\",\n                                    padding: \"0.5rem\",\n                                    lineHeight: \"1.3rem\",\n                                  }}\n                                >\n                                  {tooltips[k]}\n                                </div>\n                              }\n                              placement=\"right\"\n                              style={{\n                                display: \"inline-block\",\n                                cursor: \"pointer\",\n                              }}\n                              arrow\n                            >\n                              <HelpOutlineIcon\n                                style={{\n                                  fontSize: \"1rem\",\n                                  color: \"gray\",\n                                  marginLeft: \"1rem\",\n                                }}\n                              />\n                            </Tooltip>\n                          ) : (\n                            <div></div>\n                          )}\n                        </Typography>\n                      </AccordionSummary>\n                      <AccordionDetails style={{ flexDirection: \"column\" }}>\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          style={{ width: \"10px\" }}\n                        >\n                          <AddIcon\n                            className={classes.icon}\n                            onClick={() => {\n                              data[k].push(cloneDeep(schema[k][0]));\n                              setData();\n                            }}\n                          />\n                        </Button>\n                        {data[k].map((elt, idx) => (\n                          <Card className={classes.cardRoot}>\n                            <CardHeader\n                              avatar={\n                                <Button variant=\"contained\" color=\"secondary\">\n                                  <DeleteIcon\n                                    className={classes.icon}\n                                    onClick={() => {\n                                      data[k].splice(idx, 1);\n                                      setData();\n                                    }}\n                                  />\n                                </Button>\n                              }\n                              title={format(k) + \" \" + String(idx + 1)}\n                            />\n                            <CardContent>\n                              <GenericForm\n                                schema={schema[k][0]}\n                                data={elt}\n                                name=\"Parameters\"\n                                format={format}\n                                display={display}\n                                setData={setData}\n                              />\n                              {arrayAction === undefined ? (\n                                <div style={{ display: \"none\" }}></div>\n                              ) : (\n                                <Button\n                                  variant=\"contained\"\n                                  color=\"primary\"\n                                  id={`${name}-${k}-${idx}-btn`}\n                                  onClick={() => {\n                                    arrayAction.call(elt, idx);\n                                  }}\n                                >\n                                  {arrayAction.content(elt, idx)}\n                                </Button>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </AccordionDetails>\n                    </Accordion>\n                  );\n                } else if (typeof schema[k] === \"object\") {\n                  return (\n                    <GenericForm\n                      schema={schema[k]}\n                      data={data[k]}\n                      format={format}\n                      name={k}\n                      display={display}\n                      setData={setData}\n                    />\n                  );\n                } else if (typeof schema[k] === \"number\") {\n                  return (\n                    <TextField\n                      label={format(k)}\n                      defaultValue={data[k]}\n                      type=\"number\"\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                      onChange={(e) => {\n                        data[k] = Number(e.target.value);\n                        setData();\n                      }}\n                    />\n                  );\n                } else if (typeof schema[k] === \"string\") {\n                  return (\n                    <TextField\n                      label={format(k)}\n                      defaultValue={data[k]}\n                      type=\"text\"\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                      onChange={(e) => {\n                        data[k] = String(e.target.value);\n                        console.log(data);\n                        setData();\n                      }}\n                    />\n                  );\n                } else if (typeof schema[k] === \"boolean\") {\n                  return (\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={data[k]}\n                          name={name + \"-\" + k + \"-checkbox\"}\n                          color=\"primary\"\n                        />\n                      }\n                      label={format(k)}\n                      onChange={() => {\n                        data[k] = !data[k];\n                        setData();\n                      }}\n                    />\n                  );\n                } else {\n                  return <div style={{ display: \"none\" }}></div>;\n                }\n              } else {\n                return <div style={{ display: \"none\" }}></div>;\n              }\n            })}\n          </div>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n}\n\nexport default GenericForm;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { cloneDeep } from \"lodash\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { defaultCampus } from \"../reducers/campusReducer\";\nimport { savecampus } from \"../actions/campusActions\";\nimport GenericForm from \"./GenericForm\";\nimport \"../style.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"95%\",\n    margin: \"auto\",\n    padding: \"1rem\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\nfunction CustomForm({ campus, history, dispatch }) {\n  const classes = useStyles();\n  let data = cloneDeep(campus);\n  const saveData = () => {\n    dispatch(savecampus(data));\n    history.push(\"/scenarios\");\n  };\n\n  const setData = () => {\n    dispatch(savecampus(data));\n  };\n  return (\n    <div className='form-container'>\n      <div\n        style={{\n          width: \"90%\",\n          height: \"90%\",\n          margin: \"auto\",\n          padding: \"2rem 0\",\n        }}\n      >\n        <GenericForm\n          schema={defaultCampus}\n          data={data}\n          name='campus Parameters'\n          display={(k) => true}\n          setData={setData}\n        />\n        <div className={classes.btnRoot}>\n          <Button\n            variant='contained'\n            color='primary'\n            onClick={() => {\n              saveData();\n            }}\n          >\n            Save and Continue\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    ...props,\n    campus: state.campus,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(CustomForm));\n","import React from \"react\";\nimport \"../style.css\";\nimport CustomForm from \"../components/form\";\n\nexport class RegionForm extends React.Component {\n  render() {\n    return (\n      <div className=\"right-pane\">\n        <div className=\"grad-bg\"></div>\n        <CustomForm />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport EcoTwoToneIcon from \"@material-ui/icons/EcoTwoTone\";\nimport \"../style.css\";\n\nexport class CardTab extends React.Component {\n  render() {\n    let color = this.props.color;\n    return (\n      <div className=\"card\">\n        <p>{this.props.title}</p>\n        <div style={{ position: \"relative\" }}>\n          <h2>{this.props.stats}</h2>\n          <EcoTwoToneIcon\n            style={{\n              position: \"absolute\",\n              right: \"0\",\n              top: \"0\",\n              fontSize: \"3rem\",\n              color: \"lightblue\",\n            }}\n          />\n        </div>\n        <p style={{ color: color }}>{this.props.change}%</p>\n        <p>Since {this.props.duration}</p>\n      </div>\n    );\n  }\n}\n\n// CardTab.propTypes = {\n//   title: React.PropTypes.string,\n//   stats: React.PropTypes.number,\n//   change: React.PropTypes.number,\n//   duration: React.PropTypes.string,\n//   color: React.PropTypes.string,\n// };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { removeGraph } from \"../actions/graphActions\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Legend,\n  Tooltip,\n  CartesianGrid,\n  Line,\n} from \"recharts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"95%\",\n    margin: \"auto\",\n    padding: \"1rem\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction Graph({ dispatch, maxDay, simulationData, graphDisplay, dayRange }) {\n  const classes = useStyles();\n  const aggregate = (cols) => {\n    let data = [];\n    for (let i = dayRange[0]; i < dayRange[1]; i++) {\n      let daily = {};\n      cols.forEach((col) => {\n        daily[`Scenario-${col.scenario} ${col.column}`] = Number(\n          simulationData[col.scenario][i][col.column]\n        );\n      });\n      daily[\"day\"] = Number(simulationData[cols[0].scenario][i][\"DAY\"]);\n      data.push(daily);\n    }\n\n    return data;\n  };\n  return (\n    <div>\n      {graphDisplay.map((elt, idx) => (\n        <Card>\n          <CardHeader\n            avatar={\n              <Button\n                variant='contained'\n                color='secondary'\n                style={{ width: \"10px\" }}\n              >\n                <DeleteIcon\n                  className={classes.icon}\n                  onClick={() => {\n                    dispatch(removeGraph(idx));\n                  }}\n                />\n              </Button>\n            }\n            title={`Graph ${idx + 1}`}\n          />\n          <CardContent>\n            {(() => {\n              const data = aggregate(elt);\n              return (\n                <LineChart\n                  data={data}\n                  width={600}\n                  height={400}\n                  margin={{\n                    top: 10,\n                    right: 10,\n                    left: 10,\n                    bottom: 10,\n                  }}\n                >\n                  <CartesianGrid strokeDasharray='3.3' />\n                  <Tooltip />\n                  <XAxis\n                    dataKey='day'\n                    label='Day'\n                    type='number'\n                    domain={dayRange}\n                  />\n                  <YAxis />\n                  <Legend />\n                  {Object.keys(data[0]).map((datakey) =>\n                    datakey !== \"day\" ? (\n                      <Line\n                        type='monotone'\n                        dataKey={datakey}\n                        stroke='red'\n                        dot={{ r: 1 }}\n                      />\n                    ) : (\n                      <div></div>\n                    )\n                  )}\n                </LineChart>\n              );\n            })()}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    ...state,\n    ...props,\n    maxDay: state.campus.totalSimulatedDays,\n  };\n};\n\nexport default connect(mapStateToProps)(Graph);\n","export const changeRange = (payload) => {\n    return {\n        \"type\": \"GRAPH_CHANGE_RANGE\",\n        data: payload\n    }\n}\n\nexport const addGraph = (payload) => {\n    return {\n        \"type\": \"GRAPH_ADD_ONE\",\n        data: payload\n    }\n}\n\nexport const removeGraph = (id) => {\n    return {\n        \"type\": \"GRAPH_REMOVE_ONE\",\n        data: id\n    }\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n    backgroundColor: \"rgba(0,0,0,1)\",\n    opacampus: 0.8,\n  },\n  tableCell: {\n    color: \"white !important\",\n  },\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\n];\n\nexport default function CustomTable() {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label='simple table'>\n        <TableHead>\n          <TableRow>\n            <TableCell\n              className={classes.tableCell}\n              style={{ fontWeight: \"bold\" }}\n            >\n              Dessert (100g serving)\n            </TableCell>\n            <TableCell\n              className={classes.tableCell}\n              style={{ fontWeight: \"bold\" }}\n              align='right'\n            >\n              Calories\n            </TableCell>\n            <TableCell\n              className={classes.tableCell}\n              style={{ fontWeight: \"bold\" }}\n              align='right'\n            >\n              Fat&nbsp;(g)\n            </TableCell>\n            <TableCell\n              className={classes.tableCell}\n              style={{ fontWeight: \"bold\" }}\n              align='right'\n            >\n              Carbs&nbsp;(g)\n            </TableCell>\n            <TableCell\n              className={classes.tableCell}\n              style={{ fontWeight: \"bold\" }}\n              align='right'\n            >\n              Protein&nbsp;(g)\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell\n                className={classes.tableCell}\n                component='th'\n                scope='row'\n              >\n                {row.name}\n              </TableCell>\n              <TableCell className={classes.tableCell} align='right'>\n                {row.calories}\n              </TableCell>\n              <TableCell className={classes.tableCell} align='right'>\n                {row.fat}\n              </TableCell>\n              <TableCell className={classes.tableCell} align='right'>\n                {row.carbs}\n              </TableCell>\n              <TableCell className={classes.tableCell} align='right'>\n                {row.protein}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { connect } from 'react-redux';\nimport { changeRange } from '../actions/graphActions';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 240,\n    color: \"white\",\n    padding: \"1.5rem\",\n    textAlign: \"center\",\n    float: \"right\",\n  },\n});\n\nfunction valuetext(value) {\n  return `${value}°C`;\n}\n\nfunction RangeSlider({ maxDay, value, dispatch }) {\n  const classes = useStyles();\n\n  const handleChange = (event, newValue) => {\n    dispatch(changeRange(newValue));\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Date Range\n      </Typography>\n      <Slider\n        value={value}\n        onChange={handleChange}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"range-slider\"\n        getAriaValueText={valuetext}\n        style={{ color: \"#5e72e4\" }}\n        max={maxDay}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    maxDay: state.campus.totalSimulatedDays,\n    value: state.dayRange,\n    ...props\n  }\n};\n\nexport default connect(mapStateToProps)(RangeSlider);","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { addGraph } from \"../actions/graphActions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"95%\",\n    margin: \"auto\",\n    padding: \"1rem\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction GraphForm({ dispatch, graphDisplay, simulationData }) {\n  const classes = useStyles();\n  const defaultData = {\n    scenario: \"\",\n    column: \"\",\n  };\n  const [value, setValue] = useState([defaultData]);\n  const updateData = (e, idx, key) => {\n    let newValue = [...value];\n    newValue[idx][key] = e.target.value;\n    setValue(newValue);\n  };\n\n  const showGraph = () => {\n    let all_ok = true;\n    value.forEach((val) => {\n      if (val.column === \"\" || val.scenario === \"\") all_ok = false;\n    });\n\n    if (all_ok) {\n      dispatch(addGraph(value));\n      setValue([defaultData]);\n    } else {\n      alert(\"Please set all values correctly\");\n    }\n  };\n  return (\n    <Card>\n      <CardHeader\n        avatar={\n          <Button variant=\"contained\" color=\"primary\" style={{ width: \"10px\" }}>\n            <AddIcon\n              className={classes.icon}\n              onClick={() => {\n                setValue([\n                  ...value,\n                  {\n                    ...defaultData,\n                  },\n                ]);\n              }}\n            />\n          </Button>\n        }\n        title=\"Add Columns to plot\"\n      />\n      <CardContent>\n        {value.map((elt, idx) => (\n          <div>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ width: \"10px\", borderRadius: 5, backgroundColor: \"red\" }}\n            >\n              <DeleteIcon\n                className={classes.icon}\n                onClick={() => {\n                  setValue(value.filter((element, id) => id !== idx));\n                }}\n              />\n            </Button>\n            <FormControl className={classes.formControl}>\n              <InputLabel id={\"scenario-selector\" + idx}>Scenario</InputLabel>\n              <Select\n                labelId={\"scenario-selector\" + idx}\n                id={\"select-scenario-selector\" + idx}\n                value={elt.scenario}\n                onChange={(e) => {\n                  updateData(e, idx, \"scenario\");\n                }}\n              >\n                {Object.keys(simulationData).map((elt) => (\n                  <MenuItem value={elt}>{elt}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n              <InputLabel id={\"column-selector\" + idx}>Column</InputLabel>\n              <Select\n                labelId={\"column-selector\" + idx}\n                id={\"select-column-selector\" + idx}\n                value={elt.column}\n                onChange={(e) => {\n                  updateData(e, idx, \"column\");\n                }}\n              >\n                {value[idx].scenario in simulationData ? (\n                  Object.keys(\n                    simulationData[value[idx].scenario][0]\n                  ).map((elt) => <MenuItem value={elt}>{elt}</MenuItem>)\n                ) : (\n                  <div></div>\n                )}\n              </Select>\n            </FormControl>\n          </div>\n        ))}\n\n        <Button variant=\"contained\" color=\"primary\" onClick={showGraph}>\n          Display Graph\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    ...props,\n    graphDisplay: state.graphDisplay,\n    simulationData: state.simulationData,\n  };\n};\n\nexport default connect(mapStateToProps)(GraphForm);\n","import React from \"react\";\nimport \"../style.css\";\nimport { CardTab } from \"../components/card\";\nimport Graph from \"../components/graph\";\nimport CustomTable from \"../components/table.js\";\nimport ContinuousSlider from \"../components/slider\";\nimport GraphForm from \"../components/graphForm\";\n\nexport class GraphScreen extends React.Component {\n  render() {\n    return (\n      <div className=\"right-pane\">\n        <div className=\"grad-bg\"></div>\n        <div className=\"card-container\" style={{ display: \"none\" }}>\n          <CardTab\n            title=\"traffic\"\n            stats={350897}\n            change={3.48}\n            duration=\"last month\"\n            color=\"lightgreen\"\n          />\n          <CardTab\n            title=\"traffic\"\n            stats={350897}\n            change={3.48}\n            duration=\"last month\"\n            color=\"lightgreen\"\n          />\n          <CardTab\n            title=\"traffic\"\n            stats={350897}\n            change={3.48}\n            duration=\"last month\"\n            color=\"lightgreen\"\n          />\n          <CardTab\n            title=\"traffic\"\n            stats={350897}\n            change={3.48}\n            duration=\"last month\"\n            color=\"lightgreen\"\n          />\n        </div>\n        <div className=\"form-container\">\n          <GraphForm />\n        </div>\n        <div className=\"graph-container\">\n          <ContinuousSlider />\n          <Graph />\n        </div>\n        <div className=\"table-container\" style={{ display: \"none\" }}>\n          <CustomTable />\n        </div>\n      </div>\n    );\n  }\n}\n","\n\nexport const defaultScenario = {\n    ComplianceRate:0.8,\n    // initiallyInfected: 2,\n    \n}\n\nexport const defaultScenarioCollection = {\n    scenarioDetails: [\n        defaultScenario\n    ]\n}\n\nexport const scenarioReducer = (state, action) => {\n    if (action.type === \"SCENARIO_SAVE_DATA\"){\n        return {\n            ...state,\n            scenarios: action.data\n        }\n    }else{\n        console.log(action);\n        console.warn(\"Action not recognized\");\n\n        return state;\n    }\n}\n\n","// Maps frontend fields to Backend fields.\nexport default function mapFrontendToBackend(data) {\n  let ans = {};\n  ans[\"Virus_Deathrates\"] = [];\n  ans[\"Virus_IncubationPeriod\"] = [];\n  ans[\"Virus_ProbSeverity\"] = [];\n  ans[\"Comorbidty_matrix\"] = {\n    ComorbidX: [],\n  };\n\n  data.populationDistribution.forEach((population) => {\n    ans[\"Virus_Deathrates\"].push(population.deathRate);\n    ans[\"Virus_IncubationPeriod\"].push(population.incubationPeriod);\n    ans[\"Virus_ProbSeverity\"].push([\n      population.probabilityOfSeverity.mild,\n      population.probabilityOfSeverity.mediocre,\n      population.probabilityOfSeverity.severe,\n    ]);\n    ans[\"Comorbidty_matrix\"][\"ComorbidX\"].push(\n      population.probabilityOfComorbidity\n    );\n  });\n\n  //###########################Virus######################\n  let fcr = data.virusParameters.fullCapacampusRatio;\n  ans[\"Virus_FullCapRatio\"] = [\n    fcr.hospital,\n    fcr.covidHealthCare,\n    fcr.covidIsolationCentre,\n  ];\n  ans[\"Virus_InitialTestingCap\"] =\n    data.virusParameters.initialTestingCapacampus;\n  ans[\"Virus_ExpectedCureDays\"] = data.virusParameters.expectedDaysToCure;\n  ans[\"Virus_R0\"] = data.virusParameters.r0;\n  ans[\"Virus_Prob_ContactTracing\"] =\n    data.virusParameters.probabilityOfContactTracing;\n  ans[\"Virus_Params\"] = {\n    Transport: data.virusParameters.transportExposureParameter,\n    Home: data.virusParameters.homeExposureParameter,\n    Grocery: data.virusParameters.groceryExposureParameter,\n    Unemployed: data.virusParameters.unemployedExposureParameter,\n    Random: data.virusParameters.randomExposureParameter,\n  };\n\n  ans[\"SIMULATION_DAYS\"] = data.totalSimulatedDays;\n\n  ans[\"Initial_Compliance_Rate\"] = data.ComplianceRate;\n  // ans[\"INIT_INFECTED\"] = data.initiallyInfected;\n\n  return ans;\n}\n","import socket from \"socket.io-client\";\nimport { idReceive, simComplete } from \"../actions/connectionActions\";\nimport mapFrontendToBackend from \"./mapper\";\n\nconst backend_url = \"http://localhost:5000\";\n\nvar io;\nconst createConnection = (dispatch) => {\n  io = socket(backend_url);\n\n  io.on(\"sendid\", (data) => {\n    dispatch(\n      idReceive({\n        ...data,\n        complete: false,\n      })\n    );\n  });\n\n  io.on(\"senddata\", (data) => {\n    console.log(data.log);\n\n    if (data.log.indexOf(\"SIMULATION END\") !== -1) dispatch(simComplete(data));\n  });\n\n  return io;\n};\n\nconst transaction = (data, campus, idx) => {\n  io.emit(\"runsim\", {\n    caller: idx,\n    data: JSON.stringify(\n      mapFrontendToBackend({\n        ...campus,\n        ...data,\n      })\n    ),\n  });\n};\n\nexport { createConnection, transaction, io, backend_url };\n","import React from \"react\";\nimport { cloneDeep } from \"lodash\";\nimport { withRouter } from \"react-router-dom\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { connect } from \"react-redux\";\nimport { saveScenarios } from \"../actions/scenarioActions\";\nimport { defaultScenarioCollection } from \"../reducers/scenarioReducer\";\nimport { transaction } from \"../connector/socketConnector\";\nimport GenericForm from \"./GenericForm\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction CustomForm({ campus, scenarios, simulations, dispatch, history }) {\n  const triggerSimulate = (dat, idx) => {\n    // Please control the animation\n    // May require converting transaction to return a Promise.\n    transaction(dat, campus, idx);\n  };\n  let data = cloneDeep(scenarios);\n  const setData = () => {\n    dispatch(saveScenarios(data));\n  };\n\n  console.log(simulations);\n  return (\n    <div className='form-container'>\n      <GenericForm\n        schema={defaultScenarioCollection}\n        data={data}\n        name='Scenarios'\n        display={(k) => true}\n        setData={setData}\n        arrayAction={{\n          content: (elt, idx) => (\n            <div>\n              Simulate\n              <CircularProgress\n                color='white'\n                className='progressbar'\n                style={{\n                  display:\n                    idx in simulations && simulations[idx].complete === false\n                      ? \"block\"\n                      : \"none\",\n                }}\n              />\n              <CheckIcon\n                className='completeicon'\n                style={{\n                  display:\n                    idx in simulations && simulations[idx].complete === true\n                      ? \"block\"\n                      : \"none\",\n                }}\n              />\n            </div>\n          ),\n          call: triggerSimulate,\n        }}\n      />\n\n      <Button\n        variant='contained'\n        color='primary'\n        onClick={() => {\n          history.push(\"/graphs\");\n        }}\n      >\n        Go to Graphs\n      </Button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    ...state,\n    ...props,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(CustomForm));\n","import React from \"react\";\nimport \"../style.css\";\nimport CustomForm from \"../components/form2\";\n\nexport class ScenarioForm extends React.Component {\n  render() {\n    return (\n      <div className=\"right-pane\">\n        <div className=\"grad-bg\"></div>\n        <CustomForm />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function InfoScreen() {\n  return (\n    <div className='right-pane info-screen'>\n      <p>\n        <h3>\n          Welcome to the Covid-19 simulator in a self-customized IIT KGP Campus.\n          Here you can play around by initializing your custom-tailored\n          {/* campus and later decide various intervention policies to minimize the\n          spread. It’s a two step process, step 1 includes defining how your\n          campus is, second step is to define various intervention policies for\n          your campus. First the tutorial would take you to campus initialization\n          parameters. Here you’re suppose to enter the parameters of your custom\n          campus, the guide will help you understand it. Once campus is\n          instantiated, you may proceed to define scenario parameters. Scenario\n          is basically a combination of intervention policies. */}\n        </h3>\n      </p>\n      {/* <p>\n        <i>To proceed with the simulator please follow the following steps:</i>\n      </p>\n      <ol type=\"1\">\n        <li>\n          First unfold the campus parameters by clicking on down arrow button on\n          the right in Parameters tab.\n        </li>\n        <li>Next enter the total number of days you wish to simulate.</li>\n        <li>\n          <p>\n            Click on Regions(default: 8), you will see some default regions\n            popped up. A region is a part of campus which divides the campus evenly.\n            For Indian cities it can be assumed to be wards.\n          </p>\n          To add a Region click the blue '+' button, to delete a region click on\n          the trash button beside it. Once you’ve added sufficient regions.\n          Click on the parameters\n        </li>\n        <li>\n          <p>\n            After the parameters unfold, enter the total Population, Density,\n            Family Size and its Variance. Click on Workplace distribution. A\n            workplace distribution decides what proportion of workplaces of\n            respective sectors is present in that region. For instance,\n            Education = 0.5 means 50% of the Educational workplace is present in\n            that region. Do it for rest of the regions.\n          </p>\n        </li>\n        <li>\n          <p>\n            Open the Population Distribution sub-tab. Open the population\n            distribution(or bracket) 1 fold, and enter parameters there. Max Age\n            is the parameter which defines the bound of this bracket. So if your\n            max age is 24, and max age of thd previous bracket previous to it\n            was 18, the bounds will be 18-24. If its first bracket then bound is\n            assumed to be 0-24.\n          </p>\n          <p>\n            Then enter the probablity, i.e. the proportion of people belonging\n            to this age bracket. Death Rate indicates the death rate of this\n            bracket due to virus. Incubation period is for no. of days required\n            to show symptoms from date of exposure.\n          </p>\n          Later enter the probablity of severity of that age group related to\n          virus. If mild is 0.7 that means 70% of 0-18 cases are mild.Next comes\n          probablity of work, which indicates the probablity to work in a\n          sector, given the age group. So if Education is 0.5 means 50% of 0-18\n          people attend school or teach in school. Lastly, enter the probablity\n          of comorbidity which is the probablity that this age group will\n          contact a comorbidity. Do it for rest of age brackets you wish to\n          keep.\n        </li>\n        <li>\n          <p>\n            Open the Transportation tab. First is the Intra campus params, which\n            represent the people travelling inside the campus, expected stops,\n            variance of stops, number of buses in the campus, number of routes and\n            probablity that a citizen would use public transport. All this is\n            computed to randomize routes from region to region and divide the\n            buses equally amongst the routes. Next, enter the Inter campus\n            parameters, which represent the people travelling from different\n            cities into campus. Here, most parameters are obvious, Probablity\n            local travel means proportion of outside campus people using local\n            travel. Next Comes Probablity of infection which is chances that a\n            inter campus person would be infected (\n            <em>\n              Note: Expected means mean, average. Variance means the deviation\n              from the mean\n            </em>\n            )\n          </p>\n        </li>\n        <li>\n          <p>\n            Enter the initial probability of a family having to purchase\n            something on a particular day, and the minimum no. of grocery that\n            must be maintained, i.e after it goes less than it, family will have\n            to purchase. It is scaled 0-100 and family loses 10 grocery per day\n            in normal and 5 in lockdown.\n          </p>\n        </li>\n        <li>\n          <p>\n            In the economics section, Enter the average number of people working\n            per workplace in various sectors. In case of Healthcare there are 3\n            subclasses of hospitals: Covid healthcare, Covid Isolation center,\n            Covid Hospitals. Enter the average no. of people working in these\n            workplaces.\n          </p>\n        </li>\n        <li>\n          <p>\n            Lastly, Virus Related Parameters. First add the R0 value for the\n            virus you wish to simulate. Add initial testing capacampus and\n            expected days to cure. Then click on Full capacampus ratio, this is\n            the number of patients which each covid healtcare worker can handle\n            successfully. In other words, bed capacampus per healtcare worker in\n            different subclasses of healthcare sectors. Then there is a list of\n            exposure parameters. The place of spreading has been classified into\n            various different places, All these places have an expected time\n            that an Agent spends there, and the Social distance agent is able to\n            maintain there.\n          </p>\n        </li>\n        <li>\n          <p>\n            Click on save and continue to end parameters description. Then\n            you’ll be directed to Scenrios tab where towards the right you click\n            on downward arrow button to start defining scenarios. Click on\n            Scenario Details:\n          </p>\n          <ol className=\"child-list\">\n            <li>\n              <p>\n                To add scenarios, click on plus button at the top. To delete a\n                scenario, click on red trash button. In parameters fold, check\n                on tracing and testing if you want them to happen in this\n                scenario. Since testing and tracing is intertwined, we advise\n                you to check or uncheck them simulteanously. Then enter the\n                compliance rate.\n                <i>\n                  Compliance rate is responsible for random transmissions, if\n                  complaince rate is low it means people meet more randomly to\n                  spread virus within the region. Lower it is, more the spread\n                  grows exponentially. Enter the compliance rate between 0 and\n                  1.\n                </i>\n                Then enter the initially infected people. These people are\n                evenly distributed across regions.\n              </p>\n            </li>\n            <li>\n              <p>\n                Add or delete lockdown phases. Lockdown phases are of two types\n                threshold and periods. Periods are when lockdown will trigger\n                when specific day is passed and in threshold, lockdown will\n                trigger when specific total positive cases will cross. To make\n                the phase as a period enter ‘p’ in Type, otherwise enter ‘t’.\n                Now enter start day for ‘p’ type (eg 14 to start lockdown 14\n                days post simulation start) or threshold value for ‘t’ type (eg\n                50 to start lockdown after 50 people test positive)\n                <p>\n                  Next, enter the 'Applied to' part, here you can enter: Region,\n                  Random, Unemployed, Transportation and all the sectors ticked\n                  in previous slide. A lockdown in 'Applied to' means that\n                  particular place of tranmission would not spread virus for the\n                  duration of lockdown. Region lockdown means it's a containment\n                  zone policy. A ward would be locked for all but random and\n                  home transmissions during period.\n                </p>\n              </p>\n            </li>\n          </ol>\n        </li>\n        <li>\n          <p>\n            Click simulate to simulate and then go to graphs to see the visual\n            output. Enjoy!\n          </p>\n        </li>\n      </ol> */}\n    </div>\n  );\n}\n","import React from \"react\";\nimport EcoTwoToneIcon from \"@material-ui/icons/EcoTwoTone\";\nimport \"../style.css\";\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { RegionForm } from \"../screens/region_form\";\nimport { GraphScreen } from \"../screens/graph_screen\";\nimport { ScenarioForm } from \"../screens/scenario_form\";\n// import { Maps } from \"../screens/map_screen\";\nimport InfoScreen from \"../screens/info_screen\";\n\nexport class LeftPane extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path='/' component={RegionForm} />\n          <Route exact path='/scenarios' component={ScenarioForm} />\n          <Route exact path='/graphs' component={GraphScreen} />\n          {/* <Route exact path=\"/maps\" component={Maps} /> */}\n          <Route exact path='/info' component={InfoScreen} />\n        </Switch>\n        <div className='left-pane'>\n          <div className='sideheader'>\n            <p>Covid-19 Sim</p>\n          </div>\n          <div className='tablink'>\n            <EcoTwoToneIcon />\n            <Link to='/info'>Instructions</Link>\n          </div>\n          <div className='tablink'>\n            <EcoTwoToneIcon />\n            <Link to='/'>campus Parameters</Link>\n          </div>\n          <div className='tablink'>\n            <EcoTwoToneIcon />\n            <Link to='/scenarios'>Scenarios</Link>\n          </div>\n          <div className='tablink'>\n            <EcoTwoToneIcon />\n            <Link to='/graphs'>Graphs</Link>\n          </div>\n          <div className='tablink'>\n            <EcoTwoToneIcon />\n            <Link to='/maps'>Maps</Link>\n          </div>\n          <div\n            style={{\n              width: \"90%\",\n              height: \"30px\",\n              borderBottom: \"dotted 1px gray\",\n              margin: \"0 auto 1rem\",\n            }}\n          ></div>\n        </div>\n      </Router>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./style.css\";\nimport { LeftPane } from \"./components/left_pane\";\n\nfunction App() {\n  return (\n    <div>\n      <LeftPane />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { cloneDeep } from \"lodash\";\nimport { backend_url } from \"../connector/socketConnector\";\nimport csv from \"csv\";\n\nexport const connectionReducer = (state, action) => {\n  if (action.type === \"IO_STORE_ID\") {\n    let newState = cloneDeep(state);\n\n    newState.simulations[action.data.caller] = action.data;\n\n    return newState;\n  } else if (action.type === \"IO_SIM_COMPLETE\") {\n    let newState = cloneDeep(state);\n    newState.simulations[action.data.caller].complete = true;\n    fetch(\n      `${backend_url}/static/results/${\n        newState.simulations[action.data.caller].id\n      }/CAMPUS_data.csv`\n    )\n      .then((data) => data.text())\n      .then((data) => {\n        csv.parse(\n          data,\n          {\n            columns: true,\n          },\n          (err, response) => {\n            newState.simulationData[action.data.caller] = response;\n          }\n        );\n      });\n\n    return newState;\n  } else {\n    return state;\n  }\n};\n","export function graphReducer(state, action){\n    if (action.type === \"GRAPH_CHANGE_RANGE\"){\n        return {\n            ...state,\n            dayRange: action.data\n        }\n    }else if (action.type === \"GRAPH_ADD_ONE\"){\n        return {\n            ...state,\n            graphDisplay: [\n                ...state.graphDisplay,\n                action.data\n            ]\n        }\n    }else if (action.type === \"GRAPH_REMOVE_ONE\"){\n        return {\n            ...state,\n            graphDisplay: state.graphDisplay.filter((elt,  idx) => idx !== action.data)\n        }\n    }else{\n        console.log(action);\n        console.warn(\"Action not recognised\");\n        return state;\n    }\n}","import { defaultCampus, campusReducer } from \"./campusReducer\";\nimport { defaultScenarioCollection, scenarioReducer } from \"./scenarioReducer\";\nimport { connectionReducer } from \"./connectionReducer\";\nimport { graphReducer } from \"./graphReducer\";\n\nconst initState = {\n  campus: defaultCampus,\n  scenarios: defaultScenarioCollection,\n  simulations: {},\n  dayRange: [0, defaultCampus.totalSimulatedDays],\n  simulationData: {},\n  graphDisplay: [],\n};\n\nexport default function rootReducer(state = initState, action) {\n  if (action.type.startsWith(\"CAMPUS_\")) {\n    return campusReducer(state, action);\n  } else if (action.type.startsWith(\"SCENARIO_\")) {\n    return scenarioReducer(state, action);\n  } else if (action.type.startsWith(\"IO_\")) {\n    return connectionReducer(state, action);\n  } else if (action.type.startsWith(\"GRAPH_\")) {\n    return graphReducer(state, action);\n  } else {\n    console.log(action);\n    console.warn(\"Action not recognized\");\n    return state;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createConnection } from './connector/socketConnector';\n\nconst store = createStore(rootReducer, composeWithDevTools());\nconst io = createConnection(store.dispatch);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App connector={io} /></Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}